/*

@author
                  _
\      / /\    | | \  |     |    /\ \      /     
 \    / /__\   | |_/  |_____|   /__\ \    /
  \  / /    \  | | \  |     |  /    \ \  /
   \/ /      \ | |_/  |     | /      \ \/

*/

#include <bits/stdc++.h>
#include <climits>
using namespace std;
typedef long long int ll;
typedef unsigned long long int ul;
#define fr(i,start,end, inc) for(ll i=(start); i<(end); i+=inc)
#define rf(i,start,end, dec) for(ll i=(end-1); i>=(start); i-=dec)
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define pr pair<ll, ll>
#define pq priority_queue
#define all(v) v.begin(), v.end()
#define alla(arr,n) arr, arr+n
#define fsync ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define MAX 1000000007;
#define fs fastscan

/*void fastscan(ll &number)
{
    bool negative = false;
    register ll c;
    number = 0;
    c = getchar_unlocked();
    if (c=='-')
    {
        negative = true;
        c = getchar_unlocked();
    }
    for (; (c>47 && c<58); c=getchar_unlocked())
        number = number *10 + c - 48;
    if (negative)
        number *= -1;
}*/


/*class CompareDist
{
public:
    bool operator()(pair<ll, ll> n1,pair<ll, ll> n2) {
        return n1.first > n2.first || (n1.first == n2.first && n1.second > n2.second);
    }
};
*/

/*inline ll power(ll x, ll y, ll p)
{
    ll res = 1;      // Initialize result
 
    x = x % p;  // Update x if it is more than or 
                // equal to p
 
    while (y > 0)
    {
        // If y is odd, multiply x with result
        if (y & 1)
            res = (res*x) % p;
 
        // y must be even now
        y = y>>1; // y = y/2
        x = (x*x) % p;  
    }
    return res;
}*/
/*inline int aa(ll x)
{   
    int ans = 0;
    int temp;
    while(x> 0)
    {
        if(x%10 == 3)
            ans++;
        x /= 10;
    }
    return ans;
}*/

/*inline char recans(ll a, ll b, vector<char> arr[])
{
    if(arr[b][a] != '$')
        return arr[b][a];
    if(recans(a-1,b, arr) == '0' && recans(a,b-1, arr) == '0')
        return (arr[b][a] = '1');
    if(recans(a-1,b, arr) == '1' && recans(a,b-1, arr)== '1')
        return (arr[b][a] = '0');
    if((recans(a-1,b, arr) == '1' && recans(a,b-1, arr)== '0') || recans(a-1,b, arr) == '0' && recans(a,b-1, arr)== '1')
        return (arr[b][a] = '1');

}*/

/*ll gcd(ll a, ll b) 
{ 
    if (a == b) 
        return a;  
    if (a > b) 
        return gcd(a-b, b); 
    return gcd(a, b-a); 
}  
ll lcm(ll a, ll b) 
{ 
    return (a*b)/gcd(a, b); 
}

bool inline isPrime(ll n) 
{ 
    // Corner cases 
    if (n <= 1)  return false; 
    if (n <= 3)  return true; 
  
    // This is checked so that we can skip  
    // middle five numbers in below loop 
    if (n%2 == 0 || n%3 == 0) return false; 
  
    for (ll i=5; i*i<=n; i=i+6) 
        if (n%i == 0 || n%(i+2) == 0) 
           return false; 
  
    return true; 
}*/

/*ll inline myfunc(ll arr[],ll n,ll k)
{   
    ll c[n], d[n];
    if(k==n)
    {
        d[n-1] = 0;
        d[n-2] = arr[n-2];
        rf(i,0,n-2)
            d[i] = arr[i] + max(d[i+2], d[i+1]);
        return d[0];
    }
    else if(k == n-1)
    {
        c[n-1] = arr[n-1];
        c[n-2] = 0;
        d[n-1] = c[n-1];
        d[n-2] = max(c[n-1]+arr[n-2], c[n-2]);
        rf(i,0,n-2)
            d[i] = arr[i] + max(d[i+2], d[i+1]);
        return d[0];      
    }
    c[k-1] = 0;
    c[k] = arr[k];
    fr(i,k+1,n)
        c[i] = arr[i]+max(c[i-1],c[i-2]);
    d[n-1] = c[n-1];
    d[n-2] = max(c[n-1]+arr[n-2], c[n-2]);
    rf(i,0,n-2)
        d[i] = arr[i] + max(d[i+2], d[i+1]);
    return d[0];
}*/


int main()
{
    fsync
    ll t=1;
    //cin >> t;
    while(t--)
    {      
        ll ans = 0;
        fr(i,1,1000,1)
        {
            if(i%3 == 0 || i%5 ==0)
                ans += i;
        }
        cout << ans << "\n";
    }
}

